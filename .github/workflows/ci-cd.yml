name: Secure DevOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  # Code Quality and Security Analysis
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Run ESLint
        run: npm run lint

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt

      - name: Upload SonarQube results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonarqube-results
          path: target/sonar/

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Build Docker image
        run: docker build -t secure-devops-demo:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run -d -p 3000:3000 --name test-container secure-devops-demo:${{ github.sha }}
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop test-container
          docker rm test-container

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            Dockerfile
            docker-compose.yml

  # Deploy to Staging (if on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "This would typically involve:"
          echo "1. Building the application"
          echo "2. Running integration tests"
          echo "3. Deploying to staging server"
          echo "4. Running smoke tests"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          echo "This would typically involve:"
          echo "1. Health check tests"
          echo "2. API endpoint tests"
          echo "3. Security header validation"

  # Generate Security Report
  generate-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, security-scan, build-and-test]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download SonarQube results
        uses: actions/download-artifact@v4
        with:
          name: sonarqube-results
          path: sonarqube-results/

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: security-results/

      - name: Generate Security Report
        run: |
          echo "# Security Analysis Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## SonarQube Analysis Results" >> security-report.md
          echo "Quality Gate Status: ${{ needs.sonarqube-analysis.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Security Scan Results" >> security-report.md
          echo "Security Scan Status: ${{ needs.security-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Build and Test Results" >> security-report.md
          echo "Build Status: ${{ needs.build-and-test.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Identified Vulnerabilities" >> security-report.md
          echo "1. SQL Injection vulnerabilities in database queries" >> security-report.md
          echo "2. Hardcoded secrets and API keys" >> security-report.md
          echo "3. Missing input validation and sanitization" >> security-report.md
          echo "4. Weak authentication and authorization" >> security-report.md
          echo "5. CORS misconfiguration" >> security-report.md
          echo "6. Information disclosure through error messages" >> security-report.md
          echo "7. Missing security headers" >> security-report.md
          echo "8. Insecure dependencies" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with Security Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, security-scan, build-and-test]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "Pipeline failed. Please check the logs for details."
          echo "Failed jobs:"
          echo "- SonarQube Analysis: ${{ needs.sonarqube-analysis.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Build and Test: ${{ needs.build-and-test.result }}"
